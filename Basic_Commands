Below are several commands that can be useful for starting with Docker:

1. docker version - Gives the current version of Docker installed on the System, and other details about both client as well as the server
2. Install-Module DockerCompletion -Scope CurrentUser - Installs the Docker Auto - completion Module in the Current User as Scope
3. Import-Module DockerCompletion - Imports the Module installed above for use
4. Get-Module -ListAvailable DockerCompletion - Checks whether DockerCompletion Module has been installed
5. docker info - Displays wide info regarding Docker installation like kernel version, number of containers and images etc

6. docker - Displays a wide variety of option, commands and management commands available under Docker
7. docker container run --publish 80:80 nginx - Creates and publishes a new container by copying Nginx image from its default repository: Docker hub, 
   where the first port is the port in the Docker host, and the second is mapped to the port exposed in the container
8. docker container ls - Shows running containers
9. docker container ls -a - Shows all containers
10. docker stop d52b000bbaea - Stops the running container 

11. docker container rm d52b000bbaea - Removes the container with the given ID
12. docker container run --publish 4000:80 --detach nginx - Runs the new instance of the image as a container in the background of the terminal
13. docker container run --publish 4000:80 --detach --name webhost niginx - Creates the container with given name
14. docker container logs webhost - Displays logs of the container with the given name
15. docker container top webhost - Lists running processes in the specified container

16. docker container rm -f e4f - Forcefully remove (without stopping it) the running container whose ID begins with "e4f"
17. docker container stop webhost - Stops the running container with the name "webhost"
18. docker start mongo - Starts the container with fiven instructions
19. docker container run -d --name db -p 3306:3306 -e MYSQL_RANDOM_ROOT_PASSWORD=yes mysql - Create the container and set the env variable, 
    generates a random password that can be accessed through the logs of that container
20. curl localhost - Displays info about localhost (default port: 80) like Status Code, ContentLength etc

21. curl http://192.168.99.100:8080 - Displays the above info for the port 8080
22. docker image ls - Lists the images in the local repository
23. docker container inspect mysql - Shows metadata about the container with the name "mysql", like startup config, volumes etc
24. docker container stats - Shows live performance data for all containers
25. docker container run -it --name proxy nginx bash - -it keeps session open to receive terminal input, and bash if running with -it gives a terminal 
    inside the running container
25.1 ls -al - When executed in the terminal provided by above bash shell, it gives a full listing of the current path in the file system inside the container 

26. exit - To exit the above bash terminal
27. docker container run -it --name ubuntu ubuntu - Ubuntu's default CMD is bash, so we dont have to specify it
28. apt-get update - Uses apt-get package manager to download package info from all configured sources
29. apt-get install -y curl - Installs curl on Ubuntu
30. curl google.com - Using curl as we would on a local machine

31. exit - Exits the terminal and stops this running container, so Ubuntu container won't show up in docker container ls now
32. docker container start -ai ubuntu - Starts an already existing container Ubuntu (this willl have curl installed since we installed it earlier under this container)
33. docker container exec -it mysql bash - Run additional process in running container mysql, and the process is bash terminal
34. docker pull alpine - Pulls alpine image and it will now appear under images shown by docker image ls
35. docker container run -it alpine sh - Alpine is small enough to not have bash, but it does have sh

36. apk - Inside sh of alpine, we can use apk which is the packet manager of alpine to install bash etc
37. docker container port webhost - Displays the client and server ports
38. docker container inspect --format "{{ .NetworkSettings.IPAddress }}" webhost - Formats the output of commands using Go Templates
39. docker network ls - Show networks
40. docker network inspect bridge - Inspect the network bridge and displays containers attached to this network

41. docker network create my_app_net - Create a network (Spawns a new virtual network for us to attach containers to)
42. docker network connect - Attach a network to container (Dynamically creates a NIC in a container on an existing virtual network)
43. docker network disconnect - Detach a network from container
    (--network bridge - Default Docker Virtual Network, which is NATed behind the Host IP,
     --network host - Gains performance by skipping virtual networks but sacrificing security of container model,
     --network none - Removes eth0 and only leaves us with localhost interface in container,
     network driver - Built-in or 3rd party extensions that give virtual network features)  
 
    (Docker defaults the hostname to the container's name, but we can set aliases too)
    
44. docker container exec -it my_nginx ping mew_nginx - Sets up DNS resolution between 2 containers for them to talk
